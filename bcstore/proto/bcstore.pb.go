// Code generated by protoc-gen-go. DO NOT EDIT.
// source: bcstore.proto

package proto

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

func init() { proto.RegisterFile("bcstore.proto", fileDescriptor_57da369a7fea4c8c) }

var fileDescriptor_57da369a7fea4c8c = []byte{
	// 206 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x4d, 0x4a, 0x2e, 0x2e,
	0xc9, 0x2f, 0x4a, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x05, 0x53, 0x52, 0xbc, 0xb9,
	0xa9, 0xc5, 0xc5, 0x89, 0xe9, 0x50, 0x51, 0xa3, 0xdd, 0x4c, 0x5c, 0xec, 0x4e, 0xce, 0xc1, 0x20,
	0x75, 0x42, 0xea, 0x5c, 0xcc, 0xc1, 0xa9, 0x25, 0x42, 0xbc, 0x10, 0x29, 0xbd, 0xa0, 0xd4, 0xc2,
	0xe0, 0xd4, 0x12, 0x29, 0x7e, 0x38, 0xb7, 0xb8, 0xc0, 0x29, 0xb1, 0x38, 0x55, 0x89, 0x41, 0x48,
	0x8d, 0x8b, 0xd9, 0x1d, 0x55, 0xa1, 0x7b, 0x6a, 0x89, 0x14, 0x1f, 0x92, 0x42, 0xf7, 0xd4, 0x12,
	0x25, 0x06, 0x21, 0x3b, 0x2e, 0x6e, 0xf7, 0xd4, 0x12, 0xa7, 0xca, 0x80, 0xa2, 0xd4, 0xb4, 0xcc,
	0x0a, 0x21, 0x51, 0x14, 0xf5, 0x30, 0x61, 0x29, 0x31, 0x54, 0x7d, 0x30, 0x71, 0x25, 0x06, 0x21,
	0x6d, 0x2e, 0x56, 0xa7, 0xc4, 0x92, 0xe4, 0x0c, 0x21, 0x84, 0x1b, 0x0a, 0xc1, 0x02, 0xd8, 0x1c,
	0x65, 0xc4, 0xc5, 0xee, 0x59, 0xec, 0x5a, 0x91, 0x59, 0x5c, 0x22, 0x24, 0x88, 0x50, 0x0e, 0x15,
	0x92, 0x12, 0x42, 0xd2, 0x00, 0x15, 0x83, 0x3b, 0x30, 0xa0, 0x28, 0xbf, 0x20, 0xb5, 0xa8, 0xa4,
	0x12, 0xcd, 0x81, 0x30, 0x61, 0x74, 0x07, 0xc2, 0xc4, 0x95, 0x18, 0x92, 0xd8, 0xc0, 0x12, 0xc6,
	0x80, 0x00, 0x00, 0x00, 0xff, 0xff, 0x05, 0x7f, 0x34, 0xb7, 0x6b, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// BCStoreClient is the client API for BCStore service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type BCStoreClient interface {
	Set(ctx context.Context, in *ReqSet, opts ...grpc.CallOption) (*RespBase, error)
	Get(ctx context.Context, in *ReqGet, opts ...grpc.CallOption) (*RespGet, error)
	GetByPrefix(ctx context.Context, in *ReqGetByPrefix, opts ...grpc.CallOption) (*RespGetByPrefix, error)
	Batch(ctx context.Context, in *ReqBatch, opts ...grpc.CallOption) (*RespBase, error)
	IsExist(ctx context.Context, in *ReqIsExist, opts ...grpc.CallOption) (*RespIsExist, error)
	GetProperty(ctx context.Context, in *ReqGetProperty, opts ...grpc.CallOption) (*RespGetProperty, error)
}

type bCStoreClient struct {
	cc grpc.ClientConnInterface
}

func NewBCStoreClient(cc grpc.ClientConnInterface) BCStoreClient {
	return &bCStoreClient{cc}
}

func (c *bCStoreClient) Set(ctx context.Context, in *ReqSet, opts ...grpc.CallOption) (*RespBase, error) {
	out := new(RespBase)
	err := c.cc.Invoke(ctx, "/proto.BCStore/Set", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bCStoreClient) Get(ctx context.Context, in *ReqGet, opts ...grpc.CallOption) (*RespGet, error) {
	out := new(RespGet)
	err := c.cc.Invoke(ctx, "/proto.BCStore/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bCStoreClient) GetByPrefix(ctx context.Context, in *ReqGetByPrefix, opts ...grpc.CallOption) (*RespGetByPrefix, error) {
	out := new(RespGetByPrefix)
	err := c.cc.Invoke(ctx, "/proto.BCStore/GetByPrefix", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bCStoreClient) Batch(ctx context.Context, in *ReqBatch, opts ...grpc.CallOption) (*RespBase, error) {
	out := new(RespBase)
	err := c.cc.Invoke(ctx, "/proto.BCStore/Batch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bCStoreClient) IsExist(ctx context.Context, in *ReqIsExist, opts ...grpc.CallOption) (*RespIsExist, error) {
	out := new(RespIsExist)
	err := c.cc.Invoke(ctx, "/proto.BCStore/IsExist", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bCStoreClient) GetProperty(ctx context.Context, in *ReqGetProperty, opts ...grpc.CallOption) (*RespGetProperty, error) {
	out := new(RespGetProperty)
	err := c.cc.Invoke(ctx, "/proto.BCStore/GetProperty", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BCStoreServer is the server API for BCStore service.
type BCStoreServer interface {
	Set(context.Context, *ReqSet) (*RespBase, error)
	Get(context.Context, *ReqGet) (*RespGet, error)
	GetByPrefix(context.Context, *ReqGetByPrefix) (*RespGetByPrefix, error)
	Batch(context.Context, *ReqBatch) (*RespBase, error)
	IsExist(context.Context, *ReqIsExist) (*RespIsExist, error)
	GetProperty(context.Context, *ReqGetProperty) (*RespGetProperty, error)
}

// UnimplementedBCStoreServer can be embedded to have forward compatible implementations.
type UnimplementedBCStoreServer struct {
}

func (*UnimplementedBCStoreServer) Set(ctx context.Context, req *ReqSet) (*RespBase, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Set not implemented")
}
func (*UnimplementedBCStoreServer) Get(ctx context.Context, req *ReqGet) (*RespGet, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (*UnimplementedBCStoreServer) GetByPrefix(ctx context.Context, req *ReqGetByPrefix) (*RespGetByPrefix, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByPrefix not implemented")
}
func (*UnimplementedBCStoreServer) Batch(ctx context.Context, req *ReqBatch) (*RespBase, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Batch not implemented")
}
func (*UnimplementedBCStoreServer) IsExist(ctx context.Context, req *ReqIsExist) (*RespIsExist, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsExist not implemented")
}
func (*UnimplementedBCStoreServer) GetProperty(ctx context.Context, req *ReqGetProperty) (*RespGetProperty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProperty not implemented")
}

func RegisterBCStoreServer(s *grpc.Server, srv BCStoreServer) {
	s.RegisterService(&_BCStore_serviceDesc, srv)
}

func _BCStore_Set_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqSet)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BCStoreServer).Set(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.BCStore/Set",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BCStoreServer).Set(ctx, req.(*ReqSet))
	}
	return interceptor(ctx, in, info, handler)
}

func _BCStore_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqGet)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BCStoreServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.BCStore/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BCStoreServer).Get(ctx, req.(*ReqGet))
	}
	return interceptor(ctx, in, info, handler)
}

func _BCStore_GetByPrefix_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqGetByPrefix)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BCStoreServer).GetByPrefix(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.BCStore/GetByPrefix",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BCStoreServer).GetByPrefix(ctx, req.(*ReqGetByPrefix))
	}
	return interceptor(ctx, in, info, handler)
}

func _BCStore_Batch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqBatch)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BCStoreServer).Batch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.BCStore/Batch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BCStoreServer).Batch(ctx, req.(*ReqBatch))
	}
	return interceptor(ctx, in, info, handler)
}

func _BCStore_IsExist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqIsExist)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BCStoreServer).IsExist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.BCStore/IsExist",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BCStoreServer).IsExist(ctx, req.(*ReqIsExist))
	}
	return interceptor(ctx, in, info, handler)
}

func _BCStore_GetProperty_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqGetProperty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BCStoreServer).GetProperty(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.BCStore/GetProperty",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BCStoreServer).GetProperty(ctx, req.(*ReqGetProperty))
	}
	return interceptor(ctx, in, info, handler)
}

var _BCStore_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.BCStore",
	HandlerType: (*BCStoreServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Set",
			Handler:    _BCStore_Set_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _BCStore_Get_Handler,
		},
		{
			MethodName: "GetByPrefix",
			Handler:    _BCStore_GetByPrefix_Handler,
		},
		{
			MethodName: "Batch",
			Handler:    _BCStore_Batch_Handler,
		},
		{
			MethodName: "IsExist",
			Handler:    _BCStore_IsExist_Handler,
		},
		{
			MethodName: "GetProperty",
			Handler:    _BCStore_GetProperty_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "bcstore.proto",
}
